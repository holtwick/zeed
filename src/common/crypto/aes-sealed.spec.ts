import { beforeAll, describe, expect, it } from 'vitest'
import { deriveKeyPbkdf2 } from '../crypto'
import { fromBase64, toBase64 } from '../data/bin'
import { hxDecrypt, hxEncrypt } from './aes-sealed'

describe('aes Encryption and Decryption', () => {
  let key: CryptoKey

  beforeAll(async () => {
    key = await crypto.subtle.generateKey(
      {
        name: 'AES-GCM',
        length: 256,
      },
      true,
      ['encrypt', 'decrypt'],
    )
  })

  it('should encrypt and decrypt data correctly', async () => {
    const data = new TextEncoder().encode('Hello, World!')
    const encryptedData = await hxEncrypt(data, key)
    const decryptedData = await hxDecrypt(encryptedData, key)
    expect(new TextDecoder().decode(decryptedData)).toBe('Hello, World!')
  })

  it('should produce different ciphertexts for the same plaintext', async () => {
    const data = new TextEncoder().encode('Hello, World!')
    const encryptedData1 = await hxEncrypt(data, key)
    const encryptedData2 = await hxEncrypt(data, key)
    expect(encryptedData1).not.toEqual(encryptedData2)
  })

  it('should fail to decrypt with a different key', async () => {
    const data = new TextEncoder().encode('Hello, World!')
    const encryptedData = await hxEncrypt(data, key)
    const differentKey = await crypto.subtle.generateKey(
      {
        name: 'AES-GCM',
        length: 256,
      },
      true,
      ['encrypt', 'decrypt'],
    )
    await expect(hxDecrypt(encryptedData, differentKey)).rejects.toThrow()
  })

  it('should decrypt a sample that was generated by Swift code', async () => {
    const key = await deriveKeyPbkdf2(new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), {
      salt: new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
      iterations: 100000,
    })
    const dataFromKey = await crypto.subtle.exportKey('raw', key)
    expect(toBase64(dataFromKey)).toMatchInlineSnapshot(`"UDl7buu/Zn/UxCIEp55MOTOKcDHvb959P+eyozok7BA="`)

    // Two ways
    // const sample = new Uint8Array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])
    // const encryptedData2 = await hxEncrypt(sample, key)
    // expect(toBase64(encryptedData2)).toMatchInlineSnapshot(`"Eo7AexzlYXmV8gEZUE1ai68ZetTwfh8KSQ6kKffhvHAOemZ4C1c="`)

    // From Swift sample
    const encryptedData = fromBase64('AQIDBAUGBwgJCgsMqZ0hGHIvSPG5x0d12q42zezDEJVu8Ic3yB4=')
    const decryptedData = await hxDecrypt(encryptedData, key)
    expect(decryptedData).toMatchInlineSnapshot(`
      Uint8Array [
        9,
        8,
        7,
        6,
        5,
        4,
        3,
        2,
        1,
        0,
      ]
    `)
  })
})
